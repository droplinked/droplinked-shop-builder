import {
  Box,
  Button,
  Flex,
  FormControl,
  FormLabel,
  Text,
} from "@chakra-ui/react";
import { useState, useEffect, useReducer } from "react";

import {
  PageContent,
  PageContentWrapper,
  Text20px,
} from "../../RegisterPages-style";
import { useApi } from "../../../../hooks/useApi/useApi";
import { useProfile } from "../../../../hooks/useProfile/useProfile";
import { getAddressList } from "../../../../apis/addressApiService";
import { useToasty } from "../../../../context/toastify/ToastContext";
import { putUpdateShop } from "../../../../apis/shopApiService";
import {
  shopInformationReducer,
  SHOP_REDUCER_TYPES,
} from "./shop-info-reducer";
import { useCustomNavigate } from "../../../../hooks/useCustomeNavigate/useCustomNavigate";

import AddressModal from "../../../../modals/address-modal/AddressModal";
import AddressComponent from "../../../../components/shared/address-component/AddressComponent";

import InputFieldComponent from "../../../../components/shared/input-field-component/InputFieldComponent";

const INITIAL_SHOP_INFO = {
  description: "",
  addressBookID: null,
};

const RegisterShopInfo = () => {
  const [shopInformation, dispatchShopInformation] = useReducer(
    shopInformationReducer,
    INITIAL_SHOP_INFO
  );
  const [loading, setLoading] = useState(false);
  const [showAddressModal, setShowAddressModal] = useState(false);
  const [addressList, setAddressList] = useState([]);

  const { getApi, putApi } = useApi();
  const { shopNavigate } = useCustomNavigate();
  const { errorToast } = useToasty();
  const { shop } = useProfile();

  const toggleAddressModal = () => setShowAddressModal((p) => !p);

  const updateAddressList = async () => {
    let result = await getApi(getAddressList());

    if (result && result.length > 0) {
      setAddressList(result);
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_ADDRESS_BOOK,
        payload: result[0]._id,
      });
    } else {
      setAddressList([]);
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_ADDRESS_BOOK,
        payload: null,
      });
    }
  };

  useEffect(() => {
    updateAddressList();
  }, []);

  const changeDescription = (e) => {
    if (e.target.value.length < 21)
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_DESCRIPTION,
        payload: e.target.value,
      });
  };

  const isValidForm = () => {
    if (shopInformation.description.length == 0) {
      return false;
    } else if (shopInformation.addressBookID == null) {
      return false;
    } else {
      return true;
    }
  };

  const clickOnSave = async () => {
    if (shopInformation.description.length == 0) {
      errorToast("Shop name is required");
      return;
    }
    if (shopInformation.addressBookID == null) {
      errorToast("Address is required");
      return;
    }

    const apiBody = {
      description: shopInformation.description,
      addressBookID: shopInformation.addressBookID,
    };
    setLoading(true);
    const result = await putApi(putUpdateShop(apiBody));
    setLoading(false);
    if (result) {
      shopNavigate(`register/contact-info`);
    }
  };

  return (
    <>
      <PageContent>
        <PageContentWrapper>
          <Text20px>Store info</Text20px>
          <Text fontSize="sm" color="lightGray">
            Name your store and provide the shipping address(es) for your orders
          </Text>
          <InputFieldComponent
            mt={8}
            isRequired
            label="Store name"
            value={shopInformation.description}
            placeholder="Enter max 20 characters."
            change={changeDescription}
          />

          <InputFieldComponent
            mt={8}
            label="Store URL"
            value={`https://droplinked.com/${shop.name}`}
            description="The URL generated by droplinked refers to your store's web address."
          />
          <FormControl isRequired mt={16} mb={10}>
            <FormLabel fontWeight="500" fontSize="18px" color="#C2C2C2">
              Source address
            </FormLabel>
            <Text color="#808080">Add source shipping address</Text>
          </FormControl>

          {!addressList.length ? (
            <Button
              size="lg"
              w="full"
              variant="outline"
              colorScheme="whiteAlpha"
              onClick={toggleAddressModal}
            >
              Add new Address
            </Button>
          ) : (
            <AddressComponent
              address={addressList[0]}
              selectAble={true}
              deleteable={true}
              updateList={updateAddressList}
            />
          )}
        </PageContentWrapper>

        <Flex justifyContent="end" mt={4}>
          <Button
            colorScheme="green"
            onClick={clickOnSave}
            isDisabled={!isValidForm()}
            isLoading={loading}
          >
            Save & next step
          </Button>
        </Flex>
      </PageContent>

      <AddressModal
        show={showAddressModal}
        close={toggleAddressModal}
        updateAddressList={updateAddressList}
      />
    </>
  );
};

export default RegisterShopInfo;
