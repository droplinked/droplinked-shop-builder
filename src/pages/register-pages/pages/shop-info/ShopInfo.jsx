import { Box, Button, Flex, FormControl, FormLabel, Text } from "@chakra-ui/react";
import { useState, useEffect, useReducer, useMemo } from "react";
import { useLocation } from "react-router-dom";

import {
  PageContent,
  PageContentWrapper,
  Text20px,
} from "../../RegisterPages-style";
import { useApi } from "../../../../hooks/useApi/useApi";
import { useProfile } from "../../../../hooks/useProfile/useProfile";
import { getAddressList } from "../../../../apis/addressApiService";
import { useToasty } from "../../../../context/toastify/ToastContext";
import { putUpdateShop } from "../../../../apis/shopApiService";
import {
  shopInformationReducer,
  SHOP_REDUCER_TYPES,
} from "./shop-info-reducer";
import { useCustomNavigate } from "../../../../hooks/useCustomeNavigate/useCustomNavigate";

import AddressModal from "../../../../modals/address-modal/AddressModal";
import AddressComponent from "../../component/address-component/AddressComponent";
import SubmitButton from "../../component/submit-buttons/SubmitButtons";

import InputFieldComponent from "../../../../components/shared/input-field-component/InputFieldComponent";
import BasicButton from "components/shared/BasicButton/BasicButton";

const INITIAL_SHOP_INFO = {
  description: "",
  addressBookID: null,
};

const RegisterShopInfo = () => {
  const [shopInformation, dispatchShopInformation] = useReducer(
    shopInformationReducer,
    INITIAL_SHOP_INFO
  );

  const [loading, setLoading] = useState(false);
  const [showAddressModal, setShowAddressModal] = useState(false);
  const [addressList, setAddressList] = useState([]);

  const { getApi, putApi } = useApi();
  const { shopNavigate } = useCustomNavigate();
  const { successToast } = useToasty();
  const { shop, updateShopData } = useProfile();

  const currentPath = useLocation().pathname;

  const diableButton = useMemo(() => {
    if (shopInformation.description.length === 0) {
      return true;
    } else if (shopInformation.addressBookID === null) {
      return true;
    } else {
      return false;
    }
  }, [shopInformation]);

  //open address modal
  const toggleAddressModal = () => setShowAddressModal((p) => !p);

  // get shop desctiption
  const getShopData = () => {
    if (shop.description)
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_DESCRIPTION,
        payload: shop.description,
      });
  };

  // get address
  const updateAddressList = async () => {
    let result = await getApi(getAddressList());
    if (result && result.length > 0) {
      setAddressList(result);
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_ADDRESS_BOOK,
        payload: result[0]._id,
      });
    } else {
      setAddressList([]);
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_ADDRESS_BOOK,
        payload: null,
      });
    }
  };

  // initialize values
  useEffect(() => {
    updateAddressList();
    getShopData();
  }, [shop]);

  // change desctiption
  const changeDescription = (e) => {
    if (e.target.value.length < 21)
      dispatchShopInformation({
        type: SHOP_REDUCER_TYPES.CHANGE_DESCRIPTION,
        payload: e.target.value,
      });
  };

  // call api for put data
  const callApi = async () => {
    const apiBody = {
      description: shopInformation.description,
      addressBookID: shopInformation.addressBookID,
    };

    setLoading(true);
    const result = await putApi(putUpdateShop(apiBody));
    await updateShopData();
    setLoading(false);
    return result;
  };

  const clickOnSave = async () => {
    const result = await callApi();
    if (result) {
      if (currentPath.includes("register"))
        shopNavigate(`register/design`);
      else {
        successToast("Updated");
      }
    }
  };

  return (
    <>
      <PageContent>
        <PageContentWrapper>
          <Text20px>Store info</Text20px>
          <Text fontSize="sm" color="lightGray">
            Name your store and provide the shipping address(es) for your orders
          </Text>
          <InputFieldComponent
            mt={8}
            isRequired
            label="Store name"
            value={shopInformation.description}
            placeholder="Enter max 20 characters."
            change={changeDescription}
          />

          <InputFieldComponent
            mt={8}
            label="Store URL"
            value={`https://droplinked.com/${shop.name}`}
            description="The URL generated by droplinked refers to your store's web address."
          />
          <FormControl isRequired mt={16} mb={10}>
            <FormLabel fontWeight="500" fontSize="18px" color="#C2C2C2">
              Source address
            </FormLabel>
            <Text color="#808080">Add source shipping address</Text>
          </FormControl>

          {!addressList.length ? (
            <Button
              size="lg"
              w="full"
              variant="outline"
              colorScheme="whiteAlpha"
              onClick={toggleAddressModal}
            >
              Add new Address
            </Button>
          ) : (
            <AddressComponent
              address={addressList[0]}
              selectAble={true}
              deleteable={true}
              updateList={updateAddressList}
            />
          )}
        </PageContentWrapper>
        <Flex justifyContent={"right"} marginTop={8} width={"100%"}>
          <Box>
            <BasicButton
              click={clickOnSave}
              disabled={diableButton}
              loading={loading}
              size="lg"
            >
              Save & next step
            </BasicButton>
          </Box>
        </Flex>
      </PageContent>

      <AddressModal
        show={showAddressModal}
        close={toggleAddressModal}
        updateAddressList={updateAddressList}
      />
    </>
  );
};

export default RegisterShopInfo;
